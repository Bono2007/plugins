var exports=function(n){"use strict";const o=/\B#([a-zA-Z0-9]+\b)/g,t=/\B@([a-zA-Z0-9]+\b)/g,e=/\B(!+\B)/g,a=/^\s*\(([a-zA-z])\)\B/g,s=["open","scheduled","done","cancelled"];function c(n,o){const t=[];let e=o.exec(n);do{var a;(null===(a=e)||void 0===a?void 0:a.length)>1&&t.push(e[1].trim())}while(null!==(e=o.exec(n)));return t}function l(n){let o=-1;return o=n.exclamations[0]?n.exclamations[0].length:n.parensPriority[0]?n.parensPriority[0].charCodeAt(0)-"A".charCodeAt(0)+1:-1,o}const r=n=>{const o=Array.isArray(n)?n[0]:n;return"string"==typeof o?o.toLowerCase():o};function i(n,o){const t="string"==typeof o?[o]:o;return n.sort((n=>(o,t)=>n.map((n=>{let e=1;return"-"===n[0]&&(e=-1,n=n.substring(1)),void 0===r(o[n])?e:void 0===r(t[n])?-e:r(o[n])>r(t[n])?e:r(o[n])<r(t[n])?-e:0})).reduce(((n,o)=>n||o),0))(t)),n}const g=[{sortFields:["-priority","content"],name:"Priority (!!! and (A))"}];function u(n,o,t="",e=""){const a=t?"".concat(t,"\n"):"",s=o.map((n=>n.raw)).join("\n");n.insertParagraph("".concat(a).concat(s).concat(e?"\n".concat(e):""),1,"text")}function d(n,r=g[0].sortFields){const u={};if(n){const g=n.paragraphs;if(console.log("\t".concat(g.length," total lines in note")),g.length){const n=function(n){const r={};s.forEach((n=>r[n]=[]));for(let i=0;i<n.length;i++){const g=n[i];if(s.indexOf(g.type)>=0){const n=g.content;try{const s=c(n,o),u=c(n,t),d=c(n,e),p=c(n,a),h={content:g.content,index:i,raw:g.rawContent,hashtags:s,mentions:u,exclamations:d,parensPriority:p};h.priority=l(h),r[g.type].push(h)}catch(n){console.log(n,g.content,i)}}}return console.log("Tasks:".concat(r.open.length," returning from getTasksByType")),r}(g);console.log("Open Tasks:".concat(n.open.length));for(const o of s)u[o]=i(n[o],r);console.log("After Sort - Open Tasks:".concat(u.open.length))}}else console.log("sorttasksInNote: no note to sort");return u}function p(n,o){const t=n.paragraphs.filter((n=>n.rawContent===o));return t&&t.length>1&&console.log("Found ".concat(t.length,' identical occurrences for "').concat(o,'". Deleting the first.')),t[0]||null}async function h(n){const o="_Task-sort-backup",t="".concat("@Trash","/").concat(o,".").concat(DataStore.defaultFileExtension);console.log("\tBackup filename: ".concat(t));let e=await DataStore.projectNoteByTitle(o,!1,!0);if(console.log("\tGot note back: ".concat(e?JSON.stringify(e):"")),!e||!e.length){console.log("\tsaveBackup: no note named ".concat(t));const n=await DataStore.newNote("_Task-sort-backup","@Trash");await CommandBar.showOptions(["OK"],"Backing up todos in @Trash/".concat(o)),console.log("\tCreated ".concat(n||""," for backups")),e=await DataStore.projectNoteByTitle(o,!1,!0),console.log("backup file contents:\n".concat(e?JSON.stringify(e):""))}e&&e[0]&&(e[0].insertParagraph("---",2,"text"),console.log("BACKUP"),await u(e[0],n))}async function f(){return await async function(n,o,t){var e,a;const{index:s}=await CommandBar.showOptions(o.map((n=>n.label)),n);return null!==(e=null===(a=o[s])||void 0===a?void 0:a.value)&&void 0!==e?e:t}("Include Task Type headings in the output?",[{label:"Yes",value:!0},{label:"No",value:!1}],!0)}return(new Date).toISOString().slice(0,10),(new Date).toISOString().slice(0,16),null==DataStore.defaultFileExtension||DataStore.defaultFileExtension,n.markTasks=async function(n,o=!0){console.log("Starting markTasks(markDone=".concat(n||"null",")"));let t=null;if(n||(t=await async function(n,o,t){var e,a;const{index:s}=await CommandBar.showOptions(o.map((n=>n.label)),n);return null!==(e=null===(a=o[s])||void 0===a?void 0:a.value)&&void 0!==e?e:t}("Mark all tasks in note as:",[{label:"Open",value:"open"},{label:"Completed",value:"done"},{label:"Cancel",value:null}],"Cancel")),"Cancel"!==t){{const n="Confirm: Mark ALL ".concat("open"===t?"Completed":"Open"," tasks as ").concat("open"===t?"Open":"Completed","?");if(o){const o=await async function(n,o=["Yes","No"]){return o[(await CommandBar.showOptions(o,n)).index]}(n);if(console.log("User said: ".concat(o)),"No"===o)return}}await async function(n){const o=Editor.paragraphs;let t,e;console.log("setTasks: ".concat(String(o.length||"zero")," paragraphs")),console.log("setTasks; setting to: ".concat(n||"null")),"open"===n?(t="done",e="open"):(t="open",e="done"),o.forEach(((n,o)=>{console.log("".concat(o,": ").concat(n.type," ").concat(n.content," ").concat(n.type===t?">> SETTING TO: ".concat(e):"")),n.type===t&&(n.type=e),Editor.updateParagraph(n)}))}(t)}else console.log("User chose Cancel")},n.sortTasks=async function(n=!0,o=g[0].sortFields,t=null){console.log("\nStarting sortTasks():");const e=n?await async function(n=g){const o=await CommandBar.showOptions(n.map((n=>n.name)),"Select sort order:");return n[o.index].sortFields}():o;console.log("\n"),console.log("\tFinished getUserSort, now sortTasksInNote");const a=null!==t||await f();console.log("\tFinished wantHeadings()=".concat(String(a),", now sortTasksInNote"));const c=d(Editor.note,e);console.log("\tFinished sortTasksInNote, now deleteExistingTasks"),await async function(n,o,t=!0){for(const e of s){console.log("Deleting ".concat(o[e].length," ").concat(e," tasks from note")),t&&await h(o[e]);try{const t=o[e].map(!!n&&(o=>p(n,o.raw)));Editor.note.removeParagraphs(t)}catch(n){console.log(JSON.stringify(n))}}}(Editor.note,c,true),console.log("\tFinished deleteExistingTasks, now writeOutTasks"),await async function(n,o,t=!1,e){const a={open:"Open Tasks",scheduled:"Scheduled Tasks",done:"Completed Tasks",cancelled:"Cancelled Tasks"},c=s.slice().reverse();for(let s=0;s<c.length;s++){const l=c[s];if(o[l].length){console.log("EDITOR_FILE TASK_TYPE=".concat(l));try{n&&await u(n,o[l],e?"### ".concat(a[l],":"):"",t?"".concat(s===o[l].length-1?"---":""):"")}catch(n){console.log(JSON.stringify(n))}}}}(Editor.note,c,!1,a),console.log("\tFinished writeOutTasks, now finished"),console.log("Finished sortTasks()!")},Object.defineProperty(n,"__esModule",{value:!0}),n}({});Object.assign(globalThis,exports);
