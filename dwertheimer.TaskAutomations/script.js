var exports=function(n){"use strict";const t=/\B#([a-zA-Z0-9]+\b)/g,o=/\B@([a-zA-Z0-9]+\b)/g,e=/\B(!+\B)/g,a=/^\s*\(([a-zA-z])\)\B/g,s=["open","scheduled","done","cancelled"];function c(n,t){const o=[];let e=t.exec(n);do{var a;(null===(a=e)||void 0===a?void 0:a.length)>1&&o.push(e[1].trim())}while(null!==(e=t.exec(n)));return o}function r(n){let t=-1;return t=n.exclamations[0]?n.exclamations[0].length:n.parensPriority[0]?n.parensPriority[0].charCodeAt(0)-"A".charCodeAt(0)+1:-1,t}const i=n=>{const t=Array.isArray(n)?n[0]:n;return"string"==typeof t?t.toLowerCase():t};function l(n,t){const o="string"==typeof t?[t]:t;return n.sort((n=>(t,o)=>n.map((n=>{let e=1;return"-"===n[0]&&(e=-1,n=n.substring(1)),void 0===i(t[n])?e:void 0===i(o[n])?-e:i(t[n])>i(o[n])?e:i(t[n])<i(o[n])?-e:0})).reduce(((n,t)=>n||t),0))(o)),n}const g=[{sortFields:["-priority","content"],name:"Priority (!!! and (A))"},{sortFields:["mentions","-priority","content"],name:"By @Person in task, then by priority"},{sortFields:["hashtags","-priority","content"],name:"By #tag in task, then by priority"},{sortFields:["content","-priority"],name:"Alphabetical, then by priority"}];function u(n,t,o="",e=""){const a=o?"".concat(o,"\n"):"",s=t.map((n=>n.raw)).join("\n");n.insertParagraph("".concat(a).concat(s).concat(e?"\n".concat(e):""),1,"text")}function d(n,i=g[0].sortFields){const u={};if(n){const g=n.paragraphs;if(console.log("\t".concat(g.length," total lines in note")),g.length){const n=function(n){const i={};s.forEach((n=>i[n]=[]));for(let l=0;l<n.length;l++){const g=n[l];if(s.indexOf(g.type)>=0){const n=g.content;try{const s=c(n,t),u=c(n,o),d=c(n,e),p=c(n,a),h={content:g.content,index:l,raw:g.rawContent,hashtags:s,mentions:u,exclamations:d,parensPriority:p};h.priority=r(h),i[g.type].push(h)}catch(n){console.log(n,g.content,l)}}}return console.log("\tgetTasksByType Open Tasks:".concat(i.open.length," returning from getTasksByType")),i}(g);console.log("\tOpen Tasks:".concat(n.open.length));for(const t of s)u[t]=l(n[t],i);console.log("\tAfter Sort - Open Tasks:".concat(u.open.length))}}else console.log("sorttasksInNote: no note to sort");return u}function p(n,t){const o=n.paragraphs.filter((n=>n.rawContent===t));return o&&o.length>1&&console.log("** Found ".concat(o.length,' identical occurrences for "').concat(t,'". Deleting the first.')),o[0]||null}async function h(n){const t="_Task-sort-backup",o="".concat("@Trash","/").concat(t,".").concat(DataStore.defaultFileExtension);console.log("\tBackup filename: ".concat(o));let e=await DataStore.projectNoteByTitle(t,!1,!0);if(console.log("\tGot note back: ".concat(e?JSON.stringify(e):"")),!e||!e.length){console.log("\tsaveBackup: no note named ".concat(o));const n=await DataStore.newNote("_Task-sort-backup","@Trash");await CommandBar.showOptions(["OK"],"Backing up todos in @Trash/".concat(t)),console.log("\tCreated ".concat(n||""," for backups")),e=await DataStore.projectNoteByTitle(t,!1,!0),console.log("backup file contents:\n".concat(e?JSON.stringify(e):""))}e&&e[0]&&(e[0].insertParagraph("---",2,"text"),console.log("\tBACKUP Saved to ".concat(t)),await u(e[0],n))}async function f(){return await async function(n,t,o){var e,a;const{index:s}=await CommandBar.showOptions(t.map((n=>n.label)),n);return null!==(e=null===(a=t[s])||void 0===a?void 0:a.value)&&void 0!==e?e:o}("Include Task Type headings in the output?",[{label:"Yes",value:!0},{label:"No",value:!1}],!0)}return(new Date).toISOString().slice(0,10),(new Date).toISOString().slice(0,16),null==DataStore.defaultFileExtension||DataStore.defaultFileExtension,n.markTasks=async function(n,t=!0){console.log("Starting markTasks(markDone=".concat(n||"null",")"));let o=null;if(n||(o=await async function(n,t,o){var e,a;const{index:s}=await CommandBar.showOptions(t.map((n=>n.label)),n);return null!==(e=null===(a=t[s])||void 0===a?void 0:a.value)&&void 0!==e?e:o}("Mark all tasks in note as:",[{label:"Open",value:"open"},{label:"Completed",value:"done"},{label:"Cancel",value:null}],"Cancel")),"Cancel"!==o){{const n="Confirm: Mark ALL ".concat("open"===o?"Completed":"Open"," tasks as ").concat("open"===o?"Open":"Completed","?");if(t){const t=await async function(n,t=["Yes","No"]){return t[(await CommandBar.showOptions(t,n)).index]}(n);if(console.log("User said: ".concat(t)),"No"===t)return}}await async function(n){const t=Editor.paragraphs;let o,e;console.log("setTasks: ".concat(String(t.length||"zero")," paragraphs")),console.log("setTasks; setting to: ".concat(n||"null")),"open"===n?(o="done",e="open"):(o="open",e="done"),t.forEach(((n,t)=>{console.log("".concat(t,": ").concat(n.type," ").concat(n.content," ").concat(n.type===o?">> SETTING TO: ".concat(e):"")),n.type===o&&(n.type=e),Editor.updateParagraph(n)}))}(o)}else console.log("User chose Cancel")},n.sortTasks=async function(n=!0,t=g[0].sortFields,o=null){console.log("\n\nStarting sortTasks(".concat(n,",").concat(JSON.stringify(t),",").concat(o,"):"));const e=n?await async function(n=g){console.log("\tgetUserSort(".concat(JSON.stringify(n)));const t=await CommandBar.showOptions(n.map((n=>n.name)),"Select sort order:");return console.log("\tgetUserSort returning ".concat(JSON.stringify(n[t.index].sortFields))),n[t.index].sortFields}():t;console.log("\tUser specified sort=".concat(JSON.stringify(e))),console.log("\tFinished getUserSort, now running wantHeadings");const a=null!==o||await f();console.log("\tFinished wantHeadings()=".concat(String(a),", now running sortTasksInNote"));const c=d(Editor.note,e);console.log("\tFinished sortTasksInNote, now running deleteExistingTasks"),await async function(n,t,o=!0){for(const e of s){console.log("\tDeleting ".concat(t[e].length," ").concat(e," tasks from note")),o&&await h(t[e]);try{const o=t[e].map(!!n&&(t=>p(n,t.raw)));Editor.note.removeParagraphs(o)}catch(n){console.log(JSON.stringify(n))}}}(Editor.note,c,true),console.log("\tFinished deleteExistingTasks, now running writeOutTasks"),await async function(n,t,o=!1,e){const a={open:"Open Tasks",scheduled:"Scheduled Tasks",done:"Completed Tasks",cancelled:"Cancelled Tasks"},c=s.slice().reverse();for(let s=0;s<c.length;s++){const r=c[s];if(t[r].length){console.log("\tEDITOR_FILE TASK_TYPE=".concat(r));try{n&&await u(n,t[r],e?"### ".concat(a[r],":"):"",o?"".concat(s===t[r].length-1?"---":""):"")}catch(n){console.log(JSON.stringify(n))}}}}(Editor.note,c,!1,a),console.log("\tFinished writeOutTasks, now finished"),console.log("Finished sortTasks()!")},Object.defineProperty(n,"__esModule",{value:!0}),n}({});Object.assign(globalThis,exports);
