var exports=function(n){"use strict";async function t(n,t,o){var e,a;const{index:s}=await CommandBar.showOptions(t.map((n=>n.label)),n);return null!==(e=null===(a=t[s])||void 0===a?void 0:a.value)&&void 0!==e?e:o}async function o(n,t=["Yes","No"]){return t[(await CommandBar.showOptions(t,n)).index]}(new Date).toISOString().slice(0,10),(new Date).toISOString().slice(0,16),null==DataStore.defaultFileExtension||DataStore.defaultFileExtension;const e=/\B#([a-zA-Z0-9]+\b)/g,a=/\B@([a-zA-Z0-9]+\b)/g,s=/\B(!+\B)/g,c=/^\s*\(([a-zA-z])\)\B/g,i=["open","scheduled","done","cancelled"];function r(n,t){const o=[];let e=t.exec(n);do{var a;(null===(a=e)||void 0===a?void 0:a.length)>1&&o.push(e[1].trim())}while(null!==(e=t.exec(n)));return o}function l(n){let t=-1;return t=n.exclamations[0]?n.exclamations[0].length:n.parensPriority[0]?n.parensPriority[0].charCodeAt(0)-"A".charCodeAt(0)+1:-1,t}const g=n=>{const t=Array.isArray(n)?n[0]:n;return"string"==typeof t?t.toLowerCase():t};function u(n,t){const o="string"==typeof t?[t]:t;return n.sort((n=>(t,o)=>n.map((n=>{let e=1;return"-"===n[0]&&(e=-1,n=n.substring(1)),void 0===g(t[n])?e:void 0===g(o[n])?-e:g(t[n])>g(o[n])?e:g(t[n])<g(o[n])?-e:0})).reduce(((n,t)=>n||t),0))(o)),n}const d=[{sortFields:["-priority","content"],name:"By Priority (!!! and (A)) then by content"},{sortFields:["mentions","-priority","content"],name:"By @Person in task, then by priority"},{sortFields:["hashtags","-priority","content"],name:"By #tag in task, then by priority"},{sortFields:["content","-priority"],name:"Alphabetical, then by priority"}];function p(n,t,o="",e="",a=""){let s=[];const c=o?"".concat(o,"\n"):"";if(a){let n="";for(const o in t){const e=t[o][a][0]||t[o][a]||"";console.log("lastSubcat[".concat(a,"]=").concat(e," check: ").concat(JSON.stringify(t[o]))),n!==e&&(n=e,s.push({raw:"#### ".concat(e)})),s.push(t[o])}}else s=t;const i=s.map((n=>n.raw)).join("\n");console.log("inserting tasks: \n".concat(JSON.stringify(s))),n.insertParagraph("".concat(c).concat(i).concat(e?"\n".concat(e):""),1,"text")}function h(n,t=d[0].sortFields){const o={};if(n){const g=n.paragraphs;if(console.log("\t".concat(g.length," total lines in note")),g.length){const n=function(n){const t={};i.forEach((n=>t[n]=[]));for(let o=0;o<n.length;o++){const g=n[o];if(i.indexOf(g.type)>=0){const n=g.content;try{const i=r(n,e),u=r(n,a),d=r(n,s),p=r(n,c),h={content:g.content,index:o,raw:g.rawContent,hashtags:i,mentions:u,exclamations:d,parensPriority:p};h.priority=l(h),t[g.type].push(h)}catch(n){console.log(n,g.content,o)}}}return console.log("\tgetTasksByType Open Tasks:".concat(t.open.length," returning from getTasksByType")),t}(g);console.log("\tOpen Tasks:".concat(n.open.length));for(const e of i)o[e]=u(n[e],t);console.log("\tAfter Sort - Open Tasks:".concat(o.open.length))}}else console.log("\tsorttasksInNote: no note to sort");return o}function f(n,t){if(t){const o=n.paragraphs.filter((n=>n.rawContent===t));return o&&o.length>1&&console.log("** Found ".concat(o.length,' identical occurrences for "').concat(t,'". Deleting the first.')),o[0]||null}return null}async function y(n){const t="_Task-sort-backup",o="".concat("@Trash","/").concat(t,".").concat(DataStore.defaultFileExtension);console.log("\tBackup filename: ".concat(o));let e=await DataStore.projectNoteByTitle(t,!1,!0);if(console.log("\tGot note back: ".concat(e?JSON.stringify(e):"")),!e||!e.length){console.log("\tsaveBackup: no note named ".concat(o));const n=await DataStore.newNote("_Task-sort-backup","@Trash");await CommandBar.showOptions(["OK"],"\tBacking up todos in @Trash/".concat(t)),console.log("\tCreated ".concat(n||""," for backups")),e=await DataStore.projectNoteByTitle(t,!1,!0),console.log("\tbackup file contents:\n".concat(e?JSON.stringify(e):""))}e&&e[0]&&(e[0].insertParagraph("---",2,"text"),console.log("\tBACKUP Saved to ".concat(t)),await p(e[0],n))}return n.markTasks=async function(n,e=!0){console.log("Starting markTasks(markDone=".concat(n||"null",")"));let a=null;if(n||(a=await t("Mark all tasks in note as:",[{label:"Open",value:"open"},{label:"Completed",value:"done"},{label:"Cancel",value:null}],"Cancel")),"Cancel"!==a){{const n="Confirm: Mark ALL ".concat("open"===a?"Completed":"Open"," tasks as ").concat("open"===a?"Open":"Completed","?");if(e){const t=await o(n);if(console.log("User said: ".concat(t)),"No"===t)return}}await async function(n){const t=Editor.paragraphs;let o,e;console.log("setTasks: ".concat(String(t.length||"zero")," paragraphs")),console.log("setTasks; setting to: ".concat(n||"null")),"open"===n?(o="done",e="open"):(o="open",e="done"),t.forEach(((n,t)=>{console.log("".concat(t,": ").concat(n.type," ").concat(n.content," ").concat(n.type===o?">> SETTING TO: ".concat(e):"")),n.type===o&&(n.type=e),Editor.updateParagraph(n)}))}(a)}else console.log("User chose Cancel")},n.sortTasks=async function(n=!0,e=d[0].sortFields,a=null,s=null){console.log("\n\nStarting sortTasks(".concat(String(n),",").concat(JSON.stringify(e),",").concat(String(a),"):"));const c=n?await async function(n=d){console.log("\tgetUserSort(".concat(JSON.stringify(n)));const t=await CommandBar.showOptions(n.map((n=>n.name)),"Select sort order:");return console.log("\tgetUserSort returning ".concat(JSON.stringify(n[t.index].sortFields))),n[t.index].sortFields}():e;console.log("\tUser specified sort=".concat(JSON.stringify(c))),console.log("\tFinished getUserSort, now running wantHeadings");const r=null!==a||await async function(){return await t("Include Task Type headings in the output?",[{label:"Yes",value:!0},{label:"No",value:!1}],!0)}();console.log("\tFinished wantHeadings()=".concat(String(r),", now running wantSubHeadings"));const l=null!==s||await async function(){return"Yes"===await o("Include sort field subheadings in the output?")}(),g="-"===c[0][0]?c[0].substring(1):c[0];console.log("\twithSubHeadings=".concat(String(s)," printSubHeadings=").concat(String(l),"  cat=").concat(l?g:"")),console.log("\tFinished wantSubHeadings()=".concat(String(l),", now running sortTasksInNote"));const u=h(Editor.note,c);console.log("\tFinished sortTasksInNote, now running deleteExistingTasks"),await async function(n,t,o=!0){for(const e of i){console.log("\tDeleting ".concat(t[e].length," ").concat(e," tasks from note")),o&&await y(t[e]);try{const o=t[e].map(!!n&&(t=>f(n,t.raw||null)));Editor.note.removeParagraphs(o)}catch(n){console.log("**** ERROR deleting ".concat(e," ").concat(JSON.stringify(n)))}}}(Editor.note,u,true),console.log("\tFinished deleteExistingTasks, now running writeOutTasks"),await async function(n,t,o=!1,e=!1,a=null){const s={open:"Open Tasks",scheduled:"Scheduled Tasks",done:"Completed Tasks",cancelled:"Cancelled Tasks"},c=i.slice().reverse();for(let i=0;i<c.length;i++){const r=c[i];if(t[r].length){console.log("\tEDITOR_FILE TASK_TYPE=".concat(r));try{n&&await p(n,t[r],e?"### ".concat(s[r],":"):"",o?"".concat(i===t[r].length-1?"---":""):"",a)}catch(n){console.log(JSON.stringify(n))}}}}(Editor.note,u,!1,r,l?g:""),console.log("\tFinished writeOutTasks, now finished"),console.log("Finished sortTasks()!")},Object.defineProperty(n,"__esModule",{value:!0}),n}({});Object.assign(globalThis,exports);
