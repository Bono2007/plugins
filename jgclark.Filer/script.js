var exports=function(t){"use strict";async function e(t,e="OK"){await CommandBar.showOptions([e],t)}async function n(){const t="0.4.0";console.log("Running v".concat(t));const{selectedLinesText:n,selectedText:o,selectedParagraphs:a}=Editor;if(console.log("\nnewNoteFromSelection (running v".concat(t,") ").concat(a.length," selected:")),n.length&&""!==o){console.log("\t1st Para Type = ".concat(a[0].type,' = "').concat(a[0].content,'"'));const t=["title","text","empty"].indexOf(a[0].type)>=0,o=a[0].content;let d=await CommandBar.showInput("Title of new note ([enter] to use text below)",o);d||(d=o,t&&n.shift());const g=n.join("\n"),p=function(t){let e=0,n=[],o=t;for(;1==++e||n.length>0;)o=1===e?t:"".concat(t," ").concat(e),n=DataStore.projectNoteByTitle(o,!0,!1);return o}(d);d!==p&&(await e('Title exists. Using "'.concat(p,'" instead')),d=p);const u=await async function(t){let e;const n=DataStore.folders;e=n.length>0?n[(await CommandBar.showOptions(n,t)).index]:"/";return console.log("\tcurrentFolder=".concat(e)),e}("Select folder to add note in:");if(d){var c,l,i,r,s;const t=null!==(c=null!==(l=null===(i=Editor.note)||void 0===i?void 0:i.title)&&void 0!==l?l:null===(r=Editor.note)||void 0===r?void 0:r.filename)&&void 0!==c?c:"";console.log("\torigFile:".concat(t));const n=null!==(s=await DataStore.newNote(d,u))&&void 0!==s?s:"";console.log("\tnewNote returned Filename:".concat(n));const o="".concat("/"!==u?"".concat(u,"/"):"").concat(n),a=await CommandBar.showOptions(["Yes","No"],"Insert link to new file where selection was?"),p=await async function(t,e,n=!0){console.log('\tAbout to open filename: "'.concat(t,'" (').concat(e,") using ").concat(n?"projectNoteByFilename":"noteByFilename"));const o=await n?DataStore.projectNoteByFilename(t):DataStore.noteByFilename(t,"Notes");return o?console.log("\t\tOpened ".concat(t," (").concat(e," version) ")):console.log("\t\tDidn't work! ".concat(n?"projectNoteByFilename":"noteByFilename"," returned ").concat(String(o))),o}(o,"no leading slash");if(p){console.log("\tnewNote=".concat(String(p),"\n\t").concat(String(p.title))),console.log("\tcontent=".concat(String(p.content)));const e=0===a.index;Editor.replaceSelectionWithText&&(e?Editor.replaceSelectionWithText("[[".concat(d,"]]")):Editor.replaceSelectionWithText("")),p.appendParagraph(g,"empty"),e&&p.appendParagraph("^^^ Moved from [[".concat(t,"]]:"),"text"),"Yes"===await async function(t,e=["Yes","No"]){return e[(await CommandBar.showOptions(e,t)).index]}("New Note created. Open it now?")&&await Editor.openNoteByFilename(o)}else console.log('\tCould not open file: "'.concat(o,'"')),e("\tCould not open file ".concat(o))}else console.log("\tError: undefined or empty title")}else e("No text was selected. Nothing to do.","OK, I'll try again!");console.log("\nnewNoteFromSelection (finished)")}return globalThis.newNoteFromSelection=n,t.fileParas=async function(){var t,e;const{content:n,selectedParagraphs:o,note:a}=Editor;if(null==n||null==o||null==a)return void console.log("fileParse: warning: No note open.");const c=Editor.paragraphs,l=Editor.selection;if(null==l)return;const i=Editor.paragraphRangeAtCharacterIndex(l.start);console.log("\nfileParse: selection ".concat(JSON.stringify(i)));let r=0;for(let t=0;t<c.length;t++){var s;if((null===(s=c[t].contentRange)||void 0===s?void 0:s.start)===i.start){r=t;break}}console.log("  First para index: ".concat(r));let d=[];if(o.length>1)d=[...o],console.log("  Found ".concat(d.length," selected paras"));else{const t=o[0];if(console.log("  Para '".concat(t.content,"' type: ").concat(t.type,", index: ").concat(r)),"title"===t.type){const e=t.headingLevel;console.log("  Found heading level ".concat(e)),d.push(t);for(let t=r+1;t<c.length;t++){const n=c[t];if("title"===n.type&&n.headingLevel<=e)break;d.push(n)}console.log("  Found ".concat(d.length," heading section lines"))}else{const e=t.indents;console.log("  Found single line with indent level ".concat(e)),d.push(t);for(let t=r+1;t<c.length;t++){const n=c[t];if(n.indents<=e)break;d.push(n)}console.log("  Found ".concat(d.length-1," indented paras"))}}if("Calendar"===a.type){const t=(new Date).toISOString().slice(0,10);d[0].content="".concat(d[0].content," >").concat(t)}const g=function(t){let e="";for(let n=0;n<t.length;n++){const o=t[n];e+="".concat(o.rawContent,"\n")}return e.trimEnd()}(d),p=function(){const t=DataStore.projectNotes.slice(),e=DataStore.calendarNotes.slice();return t.concat(e).sort(((t,e)=>e.changedDate-t.changedDate))}();let u=await CommandBar.showOptions(p.map((t=>{var e;return null!==(e=t.title)&&void 0!==e?e:"untitled"})),"Select note to move ".concat(d.length," lines to"));const h=p[u.index];console.log("  Moving to note: ".concat(null!==(t=h.title)&&void 0!==t?t:"untitled"));let f=[];const m=h.paragraphs.filter((t=>"title"===t.type));f=m.length>0?m.map((t=>{let e="";for(let n=1;n<t.headingLevel;n++)e+="    ";return e+t.content})):["(top of note)"],f.push("(bottom of note)"),u=await CommandBar.showOptions(f,"Select a heading from note '".concat(null!==(e=h.title)&&void 0!==e?e:"Untitled","' to move after"));const w=f[u.index].trim();console.log("    under heading: ".concat(w));const v=h.paragraphs;let y=null;if("(top of note)"===w)y=0;else if("(bottom of note)"===w)y=v.length+1;else for(let t=0;t<v.length;t++){const e=v[t];if(e.content===w&&"title"===e.type){y=t+1;break}}if(null!==y){console.log("  Inserting at index ".concat(y)),await h.insertParagraph(g,y,"empty");for(let t=r+d.length-1;t>=r;t--)console.log("  Remove original para # ".concat(t)),a.removeParagraphAtIndex(t)}},t.newNoteFromSelection=n,Object.defineProperty(t,"__esModule",{value:!0}),t}({});Object.assign(globalThis,exports);
