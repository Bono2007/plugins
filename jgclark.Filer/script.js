var exports=function(t){"use strict";async function e(t,e="OK"){await CommandBar.showOptions([e],t)}async function n(){const{selectedLinesText:t,selectedText:n,selectedParagraphs:o,note:a}=Editor;if(null!=a&&t.length&&""!==n){console.log("\nnewNoteFromSelection (running v".concat("0.4.1",") ").concat(o.length," selected:"));const n=["title","text","empty"].indexOf(o[0].type)>=0,r=o[0].content;let s=await CommandBar.showInput("Title of new note ([enter] to use text below)",r);s||(s=r,n&&t.shift());const d=t.join("\n"),g=function(t){let e=0,n=[],o=t;for(;1==++e||n.length>0;)o=1===e?t:"".concat(t," ").concat(e),n=DataStore.projectNoteByTitle(o,!0,!1);return o}(s);s!==g&&(await e('Title exists. Using "'.concat(g,'" instead')),s=g);const p=await async function(t){let e;const n=DataStore.folders;e=n.length>0?n[(await CommandBar.showOptions(n,t)).index]:"/";return console.log("\tfolder=".concat(e)),e}("Select folder to add note in:");if(s){var l;const t="Calendar"===(c=a).type&&null!=c.date?function(t){const{year:e,month:n,date:o}=function(t){return{year:t.getFullYear(),month:t.getMonth()+1,date:t.getDate()}}(t);return"".concat(e,"-").concat(n<10?"0":"").concat(n,"-").concat(o<10?"0":"").concat(o)}(c.date):null!==(i=c.title)&&void 0!==i?i:"";console.log("\torigFile: ".concat(t));const n=null!==(l=await DataStore.newNote(s,p))&&void 0!==l?l:"";console.log("\tnewNote() -> filename: ".concat(n));const o=await CommandBar.showOptions(["Yes","No"],"Insert link to new file where selection was?"),r=await async function(t,e,n=!0){console.log('\tAbout to open filename: "'.concat(t,'" (').concat(e,") using ").concat(n?"projectNoteByFilename":"noteByFilename"));const o=n?await DataStore.projectNoteByFilename(t):await DataStore.noteByFilename(t,"Notes");if(null!=o)return console.log("\t\tOpened ".concat(t," (").concat(e," version) ")),o;console.log("\t\tDidn't work! ".concat(n?"projectNoteByFilename":"noteByFilename"," returned ").concat(o))}(n,"using filename");if(r){console.log("\tnewNote's title: ".concat(String(r.title))),console.log("\tnewNote's content: ".concat(String(r.content)," ..."));const e=0===o.index;Editor.replaceSelectionWithText&&(e?Editor.replaceSelectionWithText("[[".concat(s,"]]")):Editor.replaceSelectionWithText("")),r.appendParagraph(d,"empty"),e&&r.appendParagraph("^^^ Moved from [[".concat(t,"]]:"),"text"),"Yes"===await async function(t,e=["Yes","No"]){return e[(await CommandBar.showOptions(e,t)).index]}("New Note created. Open it now?")&&await Editor.openNoteByFilename(n)}else console.log("\tCould not open new note: ".concat(n)),e("Could not open new note ".concat(n))}else console.log("\tError: undefined or empty title")}else console.log("\tNo text was selected, so nothing to do."),e("No text was selected, so nothing to do.","OK, I'll try again!");var c,i;console.log("newNoteFromSelection (finished)")}return(new Date).toISOString().slice(0,10),(new Date).toISOString().slice(0,16),globalThis.newNoteFromSelection=n,t.fileParas=async function(){var t,e;const{content:n,selectedParagraphs:o,note:a}=Editor;if(null==n||null==o||null==a)return void console.log("fileParse: warning: No note open.");const l=Editor.paragraphs,c=Editor.selection;if(null==c)return;const i=Editor.paragraphRangeAtCharacterIndex(c.start);console.log("\nfileParse: selection ".concat(JSON.stringify(i)));let r=0;for(let t=0;t<l.length;t++){var s;if((null===(s=l[t].contentRange)||void 0===s?void 0:s.start)===i.start){r=t;break}}console.log("  First para index: ".concat(r));let d=[];if(o.length>1)d=[...o],console.log("  Found ".concat(d.length," selected paras"));else{const t=o[0];if(console.log("  Para '".concat(t.content,"' type: ").concat(t.type,", index: ").concat(r)),"title"===t.type){const e=t.headingLevel;console.log("  Found heading level ".concat(e)),d.push(t);for(let t=r+1;t<l.length;t++){const n=l[t];if("title"===n.type&&n.headingLevel<=e)break;d.push(n)}console.log("  Found ".concat(d.length," heading section lines"))}else{const e=t.indents;console.log("  Found single line with indent level ".concat(e)),d.push(t);for(let t=r+1;t<l.length;t++){const n=l[t];if(n.indents<=e)break;d.push(n)}console.log("  Found ".concat(d.length-1," indented paras"))}}if("Calendar"===a.type){const t=(new Date).toISOString().slice(0,10);d[0].content="".concat(d[0].content," >").concat(t)}const g=function(t){let e="";for(let n=0;n<t.length;n++){const o=t[n];e+="".concat(o.rawContent,"\n")}return e.trimEnd()}(d),p=function(){const t=DataStore.projectNotes.slice(),e=DataStore.calendarNotes.slice();return t.concat(e).sort(((t,e)=>e.changedDate-t.changedDate))}();let u=await CommandBar.showOptions(p.map((t=>{var e;return null!==(e=t.title)&&void 0!==e?e:"untitled"})),"Select note to move ".concat(d.length," lines to"));const h=p[u.index];console.log("  Moving to note: ".concat(null!==(t=h.title)&&void 0!==t?t:"untitled"));let f=[];const w=h.paragraphs.filter((t=>"title"===t.type));f=w.length>0?w.map((t=>{let e="";for(let n=1;n<t.headingLevel;n++)e+="    ";return e+t.content})):["(top of note)"],f.push("(bottom of note)"),u=await CommandBar.showOptions(f,"Select a heading from note '".concat(null!==(e=h.title)&&void 0!==e?e:"Untitled","' to move after"));const m=f[u.index].trim();console.log("    under heading: ".concat(m));const y=h.paragraphs;let v=null;if("(top of note)"===m)v=0;else if("(bottom of note)"===m)v=y.length+1;else for(let t=0;t<y.length;t++){const e=y[t];if(e.content===m&&"title"===e.type){v=t+1;break}}if(null!==v){console.log("  Inserting at index ".concat(v)),await h.insertParagraph(g,v,"empty");for(let t=r+d.length-1;t>=r;t--)console.log("  Remove original para # ".concat(t)),a.removeParagraphAtIndex(t)}},t.newNoteFromSelection=n,Object.defineProperty(t,"__esModule",{value:!0}),t}({});Object.assign(globalThis,exports);
