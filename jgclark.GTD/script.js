var exports=function(t){"use strict";(new Date).toISOString().slice(0,10);const e=(new Date).toISOString().slice(0,16);async function o(){console.log("getNextNoteToReview")}async function n(){var t;const e="@reviewed",o="".concat(e,"\\(").concat("\\d{4}-[01]\\d{1}-\\d{2}","\\)"),n="".concat(e,"(").concat(function(t){const{year:e,month:o,date:n}=function(t){return{year:t.getFullYear(),month:t.getMonth()+1,date:t.getDate()}}(t);return"".concat(e,"-").concat(o<10?"0":"").concat(o,"-").concat(n<10?"0":"").concat(n)}(new Date),")");if(null==Editor.note||"Calendar"===Editor.note.type)return;let i;const a=null===(t=Editor.note)||void 0===t?void 0:t.mentions.find((t=>t.match(o)));if(null!=a){const t=a;for(const t of Editor.paragraphs)t.content.match(o)&&(i=t,console.log("\tFound existing ".concat(e,"(date) in line ").concat(t.lineIndex)));if(null==i)return null;const c=i,l=c.content.replace(t,n);c.content=l,console.log("\tupdating para to '".concat(l,"'")),await Editor.updateParagraph(c)}else{var c;console.log("\tno matching ".concat(e,"(date) string found. Will append to line ").concat(1));const t=null===(c=Editor.note)||void 0===c?void 0:c.paragraphs[1];if(null==t)return null;const o=t;o.content+=" ".concat(n),await Editor.updateParagraph(o)}return Editor.note}function i(t,e,o){return e in t?Object.defineProperty(t,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[e]=o,t}const a="Summaries";function c(t,e){let o;o=""!==e?DataStore.projectNotes.slice().filter((t=>t.filename.startsWith("".concat(e,"/")))):DataStore.projectNotes.slice();return o.filter((e=>e.hashtags.includes(t))).sort(((t,e)=>{var o,n;return(null!==(o=t.title)&&void 0!==o?o:"").localeCompare(null!==(n=e.title)&&void 0!==n?n:"")}))}function l(t){const e=void 0!==t.title?"[[".concat(t.title,"]]"):"(error)";return"- ".concat(e)}class r{constructor(t){i(this,"note",void 0),i(this,"title",void 0),i(this,"dueDate",void 0),i(this,"reviewedDate",void 0),i(this,"completedDate",void 0),i(this,"openTasks",void 0),i(this,"completedTasks",void 0),i(this,"waitingTasks",void 0),this.note=t,this.title=t.title,this.dueDate=void 0,this.reviewedDate=void 0,this.completedDate=void 0,this.openTasks=0,this.completedTasks=0,this.waitingTasks=0}timeUntilDue(){return"temp"}timeUntilReview(){return"3w"}basicSummaryLine(){var t;const e=void 0!==this.title?"[[".concat(null!==(t=this.title)&&void 0!==t?t:"","]]"):"(error)";return"- ".concat(e)}detailedSummaryLine(){var t;const e=void 0!==this.note.title?"[[".concat(null!==(t=this.note.title)&&void 0!==t?t:"","]]"):"(error)";return"- ".concat(e,"\t").concat(this.timeUntilDue(),"\t").concat(this.timeUntilReview())}}function s(t){console.log("\nmakeNoteTypeSummary for ".concat(t));let o=0;const n=[],i=DataStore.folders;console.log("".concat(i.length," folders"));for(const e of i){const i=c(t,e);if(i.length>0){n.push("### ".concat(e," (").concat(i.length," notes)"));for(const t of i)n.push(l(t));o+=i.length}}return n.unshift("Total: ".concat(o," notes. (Last updated: ").concat(e,")")),n}return t.editorSetReviewDate=n,t.getNextNoteToReview=o,t.makeNoteTypeSummary=s,t.nextReview=async function(){console.log("nextReview: stage 1");const t=await n();if(null==t)return;console.log("nextReview: stage 2"),await async function(t){var e;null!=t&&"Calendar"!==t.type||console.log("completeReviewUpdateList: error: called with null or Calendar note type");console.log("completeReviewUpdateList for '".concat(null!==(e=t.title)&&void 0!==e?e:"","'"))}(t),console.log("nextReview: stage 3");const e=await o();null!=e?(console.log("nextReview: stage 4"),Editor.openNoteByFilename(e.filename)):(console.log("nextReview: ðŸŽ‰ No more notes to review!"),await async function(t,e="OK"){await CommandBar.showOptions([e],t)}("ðŸŽ‰ No more notes to review!"))},t.noteTypeSummaries=async function(){console.log("\ntesting class Project");const t=Editor.note;if(!t)return;const e=new r(t);console.log(e.detailedSummaryLine()),console.log("\nnoteTypeSummaries");const o="#project".split(",");for(const t of o){const e=s(t),o=t.slice(1),c="'".concat(o,"' notes summary");switch(e.unshift("# ".concat(c)),"note"){case"note":{var n;let t;const o=null!==(n=DataStore.projectNoteByTitle(c,!0,!1))&&void 0!==n?n:[];if(console.log("\tfound ".concat(o.length," existing summary notes for this period")),o.length>0)t=o[0],console.log("\tfilename of first matching note: ".concat(t.filename));else{var i;let e=await DataStore.newNote(c,a);console.log("\tnewNote filename: ".concat(String(e))),e=null!==(i="".concat(a,"/").concat(String(e)))&&void 0!==i?i:"(error)",t=await DataStore.projectNoteByFilename(e),console.log("\twriting results to the new note '".concat(e,"'"))}if(null==t)return void console.log("makeNoteTypeSummary: error: shouldn't get here -- no valid note to write to");t.content=e.join("\n");console.log("\twritten results to note '".concat(c,"'"));break}}}},Object.defineProperty(t,"__esModule",{value:!0}),t}({});Object.assign(globalThis,exports);
